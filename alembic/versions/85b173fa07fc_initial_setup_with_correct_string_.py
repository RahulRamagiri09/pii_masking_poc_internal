"""initial setup with correct string lengths

Revision ID: 85b173fa07fc
Revises: 
Create Date: 2025-09-22 20:27:46.962436

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mssql

# revision identifiers, used by Alembic.
revision: str = '85b173fa07fc'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles',
    sa.Column('rolename', sa.String(length=100), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    op.create_index(op.f('ix_roles_rolename'), 'roles', ['rolename'], unique=True)
    op.create_table('users',
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('database_connections',
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('connection_type', sa.String(length=50), nullable=False),
    sa.Column('server', sa.String(length=255), nullable=False),
    sa.Column('database', sa.String(length=255), nullable=True),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('password_encrypted', sa.Text(), nullable=False),
    sa.Column('port', sa.Integer(), nullable=True),
    sa.Column('additional_params', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('test_connection_result', sa.Text(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_database_connections_id'), 'database_connections', ['id'], unique=False)
    op.create_index(op.f('ix_database_connections_name'), 'database_connections', ['name'], unique=False)
    op.create_table('workflows',
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('source_connection_id', sa.Integer(), nullable=False),
    sa.Column('destination_connection_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['destination_connection_id'], ['database_connections.id'], ),
    sa.ForeignKeyConstraint(['source_connection_id'], ['database_connections.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workflows_id'), 'workflows', ['id'], unique=False)
    op.create_index(op.f('ix_workflows_name'), 'workflows', ['name'], unique=False)
    op.create_table('table_mappings',
    sa.Column('workflow_id', sa.Integer(), nullable=False),
    sa.Column('source_table', sa.String(length=255), nullable=False),
    sa.Column('destination_table', sa.String(length=255), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflows.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_table_mappings_id'), 'table_mappings', ['id'], unique=False)
    op.create_table('workflow_executions',
    sa.Column('workflow_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('records_processed', sa.Integer(), nullable=True),
    sa.Column('execution_logs', sa.JSON(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflows.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workflow_executions_id'), 'workflow_executions', ['id'], unique=False)
    op.create_table('column_mappings',
    sa.Column('table_mapping_id', sa.Integer(), nullable=False),
    sa.Column('source_column', sa.String(length=255), nullable=False),
    sa.Column('destination_column', sa.String(length=255), nullable=False),
    sa.Column('is_pii', sa.Boolean(), nullable=True),
    sa.Column('pii_attribute', sa.String(length=100), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['table_mapping_id'], ['table_mappings.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_column_mappings_id'), 'column_mappings', ['id'], unique=False)
    op.drop_table('ErrorLog')
    op.drop_table('AWBuildVersion')
    op.drop_table('DatabaseLog')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('DatabaseLog',
    sa.Column('DatabaseLogID', sa.INTEGER(), sa.Identity(always=False, start=1, increment=1), autoincrement=True, nullable=False, comment='Primary key for DatabaseLog records.'),
    sa.Column('PostTime', sa.DATETIME(), autoincrement=False, nullable=False, comment='The date and time the DDL change occurred.'),
    sa.Column('DatabaseUser', sa.NVARCHAR(length=128), autoincrement=False, nullable=False, comment='The user who implemented the DDL change.'),
    sa.Column('Event', sa.NVARCHAR(length=128), autoincrement=False, nullable=False, comment='The type of DDL statement that was executed.'),
    sa.Column('Schema', sa.NVARCHAR(length=128), autoincrement=False, nullable=True, comment='The schema to which the changed object belongs.'),
    sa.Column('Object', sa.NVARCHAR(length=128), autoincrement=False, nullable=True, comment='The object that was changed by the DDL statment.'),
    sa.Column('TSQL', sa.NVARCHAR(), autoincrement=False, nullable=False, comment='The exact Transact-SQL statement that was executed.'),
    sa.Column('XmlEvent', mssql.XML(), autoincrement=False, nullable=False, comment='The raw XML data generated by database trigger.'),
    sa.PrimaryKeyConstraint('DatabaseLogID', name='PK_DatabaseLog_DatabaseLogID'),
    comment='Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.'
    )
    op.create_table('AWBuildVersion',
    sa.Column('SystemInformationID', mssql.TINYINT(), sa.Identity(always=False, start=1, increment=1), autoincrement=True, nullable=False, comment='Primary key for AWBuildVersion records.'),
    sa.Column('Database Version', sa.NVARCHAR(length=25), autoincrement=False, nullable=False, comment='Version number of the database in 9.yy.mm.dd.00 format.'),
    sa.Column('VersionDate', sa.DATETIME(), autoincrement=False, nullable=False, comment='Date and time the record was last updated.'),
    sa.Column('ModifiedDate', sa.DATETIME(), server_default=sa.text('(getdate())'), autoincrement=False, nullable=False, comment='Date and time the record was last updated.'),
    sa.PrimaryKeyConstraint('SystemInformationID', name='PK_AWBuildVersion_SystemInformationID'),
    comment='Current version number of the AdventureWorks 2016 sample database. '
    )
    op.create_table('ErrorLog',
    sa.Column('ErrorLogID', sa.INTEGER(), sa.Identity(always=False, start=1, increment=1), autoincrement=True, nullable=False, comment='Primary key for ErrorLog records.'),
    sa.Column('ErrorTime', sa.DATETIME(), server_default=sa.text('(getdate())'), autoincrement=False, nullable=False, comment='The date and time at which the error occurred.'),
    sa.Column('UserName', sa.NVARCHAR(length=128), autoincrement=False, nullable=False, comment='The user who executed the batch in which the error occurred.'),
    sa.Column('ErrorNumber', sa.INTEGER(), autoincrement=False, nullable=False, comment='The error number of the error that occurred.'),
    sa.Column('ErrorSeverity', sa.INTEGER(), autoincrement=False, nullable=True, comment='The severity of the error that occurred.'),
    sa.Column('ErrorState', sa.INTEGER(), autoincrement=False, nullable=True, comment='The state number of the error that occurred.'),
    sa.Column('ErrorProcedure', sa.NVARCHAR(length=126), autoincrement=False, nullable=True, comment='The name of the stored procedure or trigger where the error occurred.'),
    sa.Column('ErrorLine', sa.INTEGER(), autoincrement=False, nullable=True, comment='The line number at which the error occurred.'),
    sa.Column('ErrorMessage', sa.NVARCHAR(length=4000), autoincrement=False, nullable=False, comment='The message text of the error that occurred.'),
    sa.PrimaryKeyConstraint('ErrorLogID', name='PK_ErrorLog_ErrorLogID'),
    comment='Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.'
    )
    op.drop_index(op.f('ix_column_mappings_id'), table_name='column_mappings')
    op.drop_table('column_mappings')
    op.drop_index(op.f('ix_workflow_executions_id'), table_name='workflow_executions')
    op.drop_table('workflow_executions')
    op.drop_index(op.f('ix_table_mappings_id'), table_name='table_mappings')
    op.drop_table('table_mappings')
    op.drop_index(op.f('ix_workflows_name'), table_name='workflows')
    op.drop_index(op.f('ix_workflows_id'), table_name='workflows')
    op.drop_table('workflows')
    op.drop_index(op.f('ix_database_connections_name'), table_name='database_connections')
    op.drop_index(op.f('ix_database_connections_id'), table_name='database_connections')
    op.drop_table('database_connections')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_roles_rolename'), table_name='roles')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.drop_table('roles')
    # ### end Alembic commands ###
